#!/bin/bash

usage(){
  echo "Generate env-config.js file" >&2
  echo "--path path to the destination directory for the file" >&2
}

# if [ $# -eq 0 ]; then
#   usage
#   exit 1
# fi

path=$ENV_FILE_PATH
type="variable"

while [ "$1" != "" ]; do
  case $1 in
    -p | --path)  shift
                  path="$1"
                  ;;
    -t | --type)  shift
                  type="$1"
                  ;;
    -h | --help)  usage
                  exit
                  ;;
    * )           usage
                  exit 1
  esac
  shift
done

mkdir -p $path

# Recreate config file
rm -rf $path/env-config.js
touch $path/env-config.js

# Add assignment 
echo "window._env_ = {" >> $path/env-config.js

if [[ "$type" == file ]]; then
  # Read each line in .env file
  # Each line represents key=value pairs
  while read -r line || [[ -n "$line" ]];
  do
    # Split env variables by character `=`
    if printf '%s\n' "$line" | grep -q -e '='; then
      varname=$(printf '%s\n' "$line" | sed -e 's/=.*//')
      varvalue=$(printf '%s\n' "$line" | sed -e 's/^[^=]*=//')
    fi

    # Read value of current variable if exists as Environment variable
    value=$(printf '%s\n' "${!varname}")
    # Otherwise use value from .env file
    [[ -z $value ]] && value=${varvalue}
    
    # Append configuration property to JS file
    echo "  $varname: \"$value\"," >> $path/env-config.js
  done < .env
else
  IFS=$'\n' envs=( $(printenv) )
  for line in "${envs[@]}"; do
    if printf '%s\n' "$line" | grep -q -e '='; then
      varname=$(printf '%s\n' "$line" | sed -e 's/=.*//')
      value=$(printf '%s\n' "$line" | sed -e 's/^[^=]*=//')
    fi
    
    # Append configuration property to JS file
    echo "  $varname: \"$value\"," >> $path/env-config.js
  done
fi

echo "}" >> $path/env-config.js